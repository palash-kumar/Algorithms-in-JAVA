import java.io.*;

public class BinarySearchTree{

    static int BST(int arr[], int start, int end, int key){
        int mid = 0;
        
        //This condition is used to top recusive infinite loop
        if(end>=start){
            /*Wrong way to calculate mid point of an array 
              It will miss to check an index.
            */
            //mid = (end-start)/2;
            
            /*Correct way to calculate mid point as it checks out all the index's*/
            mid = start+(end-start)/2;
            
            /*The difference between above 2 methods to calculate a midpoint is printed below
            */
            System.out.println("in function start : "+start+" end : "+end+
            " \n=> mid (start+(end-start)/2 = "+(start+(end-start)/2)+
            "\n / mid= (end-start)/2 => "+(end-start)/2);
            
            /* To have visual on the mid point, value @mid point arr[mid] and the search key
            */
            System.out.println("mid = "+mid+" values : "+arr[mid]+" _key "+key+"\n\n");
            
            
            if(key == arr[mid]){
                //System.out.println("mid index : "+mid);
                return mid;
            }
            else if(key > arr[mid]){
                System.out.println("key > arr[mid] index : ");
                return BST(arr, mid+1, end, key);
            }
            
                System.out.println("key < arr[mid] index : ");
                return BST(arr, start, mid-1, key);
            
        }
        return -1;
    }
    
    public static void main(String []args){
        int arr[]={2, 3, 4, 10, 40};
        int key = 3;
        
        System.out.println("array Size = "+arr.length);
        //BST(array,start_index,end_index, key);
        int result= BST(arr,0,arr.length-1, key);
        System.out.println("array result index = "+result);
     }
}

Output:
array Size = 5
in function start : 0 end : 4 
=> mid (start+(end-start)/2 = 2
 / mid= (end-start)/2 => 2
mid = 2 values : 4 _key 3


key < arr[mid] index : 
in function start : 0 end : 1 
=> mid (start+(end-start)/2 = 0
 / mid= (end-start)/2 => 0
mid = 0 values : 2 _key 3


key > arr[mid] index : 
in function start : 1 end : 1 
=> mid (start+(end-start)/2 = 1
 / mid= (end-start)/2 => 0
mid = 1 values : 3 _key 3


array result index = 1
